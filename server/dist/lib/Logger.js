"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default =


























function (config) {
  var level = config.get("Debug.LogLevel") || "debug";
  var transports = [];

  if (config.get("Debug.LogToOutput")) {
    transports.push(
    new _winston2.default.transports.Console({
      timestamp: true }));


  }

  if (config.get("Debug.LogToFile")) {
    if (level != "error") {
      transports.push(createFileTransport(config));
    }
    transports.push(createFileTransport(config, "error"));
  }

  var logger = new _winston2.default.Logger({ level: level, transports: transports });
  return logger;
};var _winston = require("winston");var _winston2 = _interopRequireDefault(_winston);var _moment = require("moment");var _moment2 = _interopRequireDefault(_moment);var _fs = require("fs");var _fs2 = _interopRequireDefault(_fs);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function getFilename(config, level) {var timestamp = (0, _moment2.default)().format("YYYYMMDD");var directory = config.get("Debug.LogToFileDirectory") || "log";return directory + "/" + timestamp + (level ? "_" + level : "") + ".log";}function ensureLogFile(config, level) {var filename = getFilename(config, level);if (!_fs2.default.existsSync(filename)) {_fs2.default.closeSync(_fs2.default.openSync(filename, "w"));}return filename;}function createFileTransport(config, level) {return new _winston2.default.transports.File({ name: (level || "default") + "-file", filename: ensureLogFile(config, level), timestamp: true, level: level || "debug" });}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYlxcTG9nZ2VyLmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsImxldmVsIiwiZ2V0IiwidHJhbnNwb3J0cyIsInB1c2giLCJDb25zb2xlIiwidGltZXN0YW1wIiwiY3JlYXRlRmlsZVRyYW5zcG9ydCIsImxvZ2dlciIsIkxvZ2dlciIsImdldEZpbGVuYW1lIiwiZm9ybWF0IiwiZGlyZWN0b3J5IiwiZW5zdXJlTG9nRmlsZSIsImZpbGVuYW1lIiwiZXhpc3RzU3luYyIsImNsb3NlU3luYyIsIm9wZW5TeW5jIiwiRmlsZSIsIm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJCZSxVQUFTQSxNQUFULEVBQWlCO0FBQzlCLE1BQU1DLFFBQVFELE9BQU9FLEdBQVAsQ0FBVyxnQkFBWCxLQUFnQyxPQUE5QztBQUNBLE1BQU1DLGFBQWEsRUFBbkI7O0FBRUEsTUFBSUgsT0FBT0UsR0FBUCxDQUFXLG1CQUFYLENBQUosRUFBcUM7QUFDbkNDLGVBQVdDLElBQVg7QUFDRSxRQUFJLGtCQUFRRCxVQUFSLENBQW1CRSxPQUF2QixDQUErQjtBQUM3QkMsaUJBQVcsSUFEa0IsRUFBL0IsQ0FERjs7O0FBS0Q7O0FBRUQsTUFBSU4sT0FBT0UsR0FBUCxDQUFXLGlCQUFYLENBQUosRUFBbUM7QUFDakMsUUFBSUQsU0FBUyxPQUFiLEVBQXNCO0FBQ3BCRSxpQkFBV0MsSUFBWCxDQUFnQkcsb0JBQW9CUCxNQUFwQixDQUFoQjtBQUNEO0FBQ0RHLGVBQVdDLElBQVgsQ0FBZ0JHLG9CQUFvQlAsTUFBcEIsRUFBNEIsT0FBNUIsQ0FBaEI7QUFDRDs7QUFFRCxNQUFNUSxTQUFTLElBQUksa0JBQVFDLE1BQVosQ0FBbUIsRUFBRVIsWUFBRixFQUFTRSxzQkFBVCxFQUFuQixDQUFmO0FBQ0EsU0FBT0ssTUFBUDtBQUNELEMsQ0FoREQsa0MsaURBQ0EsZ0MsK0NBQ0Esd0Isb0lBRUEsU0FBU0UsV0FBVCxDQUFxQlYsTUFBckIsRUFBNkJDLEtBQTdCLEVBQW9DLENBQ2xDLElBQU1LLFlBQVksd0JBQVNLLE1BQVQsQ0FBZ0IsVUFBaEIsQ0FBbEIsQ0FDQSxJQUFNQyxZQUFZWixPQUFPRSxHQUFQLENBQVcsMEJBQVgsS0FBMEMsS0FBNUQsQ0FDQSxPQUFPVSxZQUFZLEdBQVosR0FBa0JOLFNBQWxCLElBQStCTCxRQUFRLE1BQU1BLEtBQWQsR0FBc0IsRUFBckQsSUFBMkQsTUFBbEUsQ0FDRCxDQUVELFNBQVNZLGFBQVQsQ0FBdUJiLE1BQXZCLEVBQStCQyxLQUEvQixFQUFzQyxDQUNwQyxJQUFNYSxXQUFXSixZQUFZVixNQUFaLEVBQW9CQyxLQUFwQixDQUFqQixDQUNBLElBQUksQ0FBQyxhQUFHYyxVQUFILENBQWNELFFBQWQsQ0FBTCxFQUE4QixDQUM1QixhQUFHRSxTQUFILENBQWEsYUFBR0MsUUFBSCxDQUFZSCxRQUFaLEVBQXNCLEdBQXRCLENBQWIsRUFDRCxDQUNELE9BQU9BLFFBQVAsQ0FDRCxDQUVELFNBQVNQLG1CQUFULENBQTZCUCxNQUE3QixFQUFxQ0MsS0FBckMsRUFBNEMsQ0FDMUMsT0FBTyxJQUFJLGtCQUFRRSxVQUFSLENBQW1CZSxJQUF2QixDQUE0QixFQUNqQ0MsTUFBTSxDQUFDbEIsU0FBUyxTQUFWLElBQXVCLE9BREksRUFFakNhLFVBQVVELGNBQWNiLE1BQWQsRUFBc0JDLEtBQXRCLENBRnVCLEVBR2pDSyxXQUFXLElBSHNCLEVBSWpDTCxPQUFPQSxTQUFTLE9BSmlCLEVBQTVCLENBQVAsQ0FNRCIsImZpbGUiOiJsaWJcXExvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3aW5zdG9uIGZyb20gXCJ3aW5zdG9uXCI7XG5pbXBvcnQgbW9tZW50IGZyb20gXCJtb21lbnRcIjtcbmltcG9ydCBmcyBmcm9tIFwiZnNcIjtcblxuZnVuY3Rpb24gZ2V0RmlsZW5hbWUoY29uZmlnLCBsZXZlbCkge1xuICBjb25zdCB0aW1lc3RhbXAgPSBtb21lbnQoKS5mb3JtYXQoXCJZWVlZTU1ERFwiKTtcbiAgY29uc3QgZGlyZWN0b3J5ID0gY29uZmlnLmdldChcIkRlYnVnLkxvZ1RvRmlsZURpcmVjdG9yeVwiKSB8fCBcImxvZ1wiO1xuICByZXR1cm4gZGlyZWN0b3J5ICsgXCIvXCIgKyB0aW1lc3RhbXAgKyAobGV2ZWwgPyBcIl9cIiArIGxldmVsIDogXCJcIikgKyBcIi5sb2dcIjtcbn1cblxuZnVuY3Rpb24gZW5zdXJlTG9nRmlsZShjb25maWcsIGxldmVsKSB7XG4gIGNvbnN0IGZpbGVuYW1lID0gZ2V0RmlsZW5hbWUoY29uZmlnLCBsZXZlbCk7XG4gIGlmICghZnMuZXhpc3RzU3luYyhmaWxlbmFtZSkpIHtcbiAgICBmcy5jbG9zZVN5bmMoZnMub3BlblN5bmMoZmlsZW5hbWUsIFwid1wiKSk7XG4gIH1cbiAgcmV0dXJuIGZpbGVuYW1lO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWxlVHJhbnNwb3J0KGNvbmZpZywgbGV2ZWwpIHtcbiAgcmV0dXJuIG5ldyB3aW5zdG9uLnRyYW5zcG9ydHMuRmlsZSh7XG4gICAgbmFtZTogKGxldmVsIHx8IFwiZGVmYXVsdFwiKSArIFwiLWZpbGVcIixcbiAgICBmaWxlbmFtZTogZW5zdXJlTG9nRmlsZShjb25maWcsIGxldmVsKSxcbiAgICB0aW1lc3RhbXA6IHRydWUsXG4gICAgbGV2ZWw6IGxldmVsIHx8IFwiZGVidWdcIlxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uZmlnKSB7XG4gIGNvbnN0IGxldmVsID0gY29uZmlnLmdldChcIkRlYnVnLkxvZ0xldmVsXCIpIHx8IFwiZGVidWdcIjtcbiAgY29uc3QgdHJhbnNwb3J0cyA9IFtdO1xuXG4gIGlmIChjb25maWcuZ2V0KFwiRGVidWcuTG9nVG9PdXRwdXRcIikpIHtcbiAgICB0cmFuc3BvcnRzLnB1c2goXG4gICAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgICAgICB0aW1lc3RhbXA6IHRydWVcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmIChjb25maWcuZ2V0KFwiRGVidWcuTG9nVG9GaWxlXCIpKSB7XG4gICAgaWYgKGxldmVsICE9IFwiZXJyb3JcIikge1xuICAgICAgdHJhbnNwb3J0cy5wdXNoKGNyZWF0ZUZpbGVUcmFuc3BvcnQoY29uZmlnKSk7XG4gICAgfVxuICAgIHRyYW5zcG9ydHMucHVzaChjcmVhdGVGaWxlVHJhbnNwb3J0KGNvbmZpZywgXCJlcnJvclwiKSk7XG4gIH1cblxuICBjb25zdCBsb2dnZXIgPSBuZXcgd2luc3Rvbi5Mb2dnZXIoeyBsZXZlbCwgdHJhbnNwb3J0cyB9KTtcbiAgcmV0dXJuIGxvZ2dlcjtcbn1cbiJdfQ==